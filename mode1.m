close all;
clc;
prompt1='Enter the pitch-';
prompt2='Enter how much time(in seconds) raga is to be recorded-';
r=input(prompt1);
rectime=input(prompt2);
recObj = audiorecorder;
disp('start recording:'); 
recordblocking(recObj,rectime);
disp('stop recording');
myRecording = getaudiodata(recObj);
audiowrite('savi.wav', myRecording, 8000, 'BitsPerSample',32);
[z,fs]=audioread('savi.wav');
%sound(z);
%f0=2*pitch(z,fs);
%disp(f0);
%r = 130.81;
notes= [r,r*(2^(1/12)), r*(2^(2/12)), r*(2^(3/12)),r*(2^(4/12)),r*(2^(5/12)),r*(2^(6/12)),r*(2^(7/12)),r*(2^(8/12)),r*(2^(9/12)),r*(2^(10/12)),r*(2^(11/12))];
num_of_notes = 12;

%--------------------------------------------RagaTable-----------------------------------------------------%
ragam = [r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%1
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%2
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%3
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%4
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%5
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%6
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%7
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%8
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%9
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%10
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%11
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%12
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%13
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%14
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%15
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%16
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%17
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%18
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%19
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%20
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%21
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%22
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%23
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%24
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%25
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%26
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%27
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%28
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%29
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%30
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%31
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%32
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%33
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%34
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%35
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(5/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%36
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%37
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%38
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%39
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%40
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%41
         r (r*(2^(1/12))) (r*(2^(2/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%42
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%43
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%44
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%45
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%46
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%47
         r (r*(2^(1/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%48
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%49
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%50
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%51
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%52
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%53
         r (r*(2^(1/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%54
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%55
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%56
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%57
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%58
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%59
         r (r*(2^(2/12))) (r*(2^(3/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%60
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%61
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%62
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%63
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%64
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%65
         r (r*(2^(2/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));%66
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(9/12)));%67
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(10/12)));%68
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(8/12))) (r*(2^(11/12)));%69
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(10/12)));%70
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(9/12))) (r*(2^(11/12)));%71
         r (r*(2^(3/12))) (r*(2^(4/12))) (r*(2^(6/12))) (r*(2^(7/12))) (r*(2^(10/12))) (r*(2^(11/12)));];%72
%--------------------------------------------------------------------------------------------------------------%
max_num_of_ragas = 72;
inp_notes = [0 0 0 0 0 0 0];
max_num_of_input_notes = 7;

%-------------------program to remove silence from the audio---------------

%-------------------------Step 1- Break the signal into frames of 0.1s-----
frame_duration = 0.07;
frame_len = frame_duration*fs;
N = length(z);
num_frames = floor(N/frame_len);

count = 0;
inp_note_index = 1;
tolerance = 5;

for k = 1:num_frames
       %-----------------extract a frame of audio--------------------------
       frame = z( (k-1)*frame_len+1 : frame_len*k);
%-------%Step 2-identify non-silent region as regions with amplitude > 0.01
       max_val = max(frame);
       
       if(max_val > 0.00001)
  %--------------------if val > threshold frame is not silent--------------
           
           count=count+1;
           f0 = pitch(frame,fs);
           
  %---------------------mapping each f0 to quantized notes-----------------
           
           for j = 1 : num_of_notes
               if(abs(f0 - notes(j)) <= tolerance)
                    f0 = notes(j);
                    break;
               end
           end
           
 %----------------to check if f0 is already stored in inp_notes------------
           contains = 0;
           for j = 1 : max_num_of_input_notes
                if(inp_notes(j) == f0) 
                    contains = 1;
                    break;
                end
           end
           
%------------if inp_notes does not contain f0 then store in inp_notes------
           if(contains == 0 && length(f0) == 1 && inp_note_index <= 7 )
                inp_notes(inp_note_index) = f0;
                inp_note_index = inp_note_index + 1;
              %  disp(inp_note_index);
           end
       end
end
%fprintf('quantized inp notes : \n')
%disp(inp_notes);

%disp(ragam);

%---------finding the raga from table corresponding to inp_freq------------
inp_raga = -1;
%-----------------looping through each raga--------------------------------
for i = 1 : max_num_of_ragas
    
    found_raga = 0;
 %------------------------looping throug each freq of a raga---------------
    for j = 1 : max_num_of_input_notes
    %-------------checking current freq with inp freq----------------
        contains = 0;
        for k = 1 : max_num_of_input_notes
            if( ragam(i,j) == inp_notes(k))
                contains = 1;
                found_raga = 1;
                break;
            end
        end
        
%this part is another way of checking for raga:  if we are at last element
%of a raga (j = max) and if that freq is present in input freq (contains = 1)
%---------------------------------------------------------------------------
%         if(j == max_num_of_input_notes && contains == 1)
%             found_raga = 1;
%         end
                
        if(contains == 0)
            found_raga = 0;
            break;
        end
    end
    if(found_raga == 1)
        inp_raga = i;
        break;
    end
end

if(inp_raga ~= -1)
    fprintf('\nfound raga %d\n',inp_raga);
else
    fprintf('\ncould not find raga');
end

   